#+TITLE: Emacs Configuration

* Configure =use-package=

#+BEGIN_SRC emacs-lisp
(require 'package)

(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))

(setq package-enable-at-startup nil)
(package-initialize)

(unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

(eval-when-compile
    (require 'use-package))

(setq use-package-verbose t)
(setq use-package-always t)
#+END_SRC

Always compile packages, and use the newest version available.
#+BEGIN_SRC emacs-lisp
  (use-package auto-compile
     :ensure t
     :config (auto-compile-on-load-mode))
  (setq load-prefer-newer t)
#+END_SRC

* Utility Functions
#+BEGIN_SRC emacs-lisp
	(defun hmov/reload-config ()
		(interactive)
		(load-file "~/.emacs.d/init.el"))

  (defun hmov/gtd ()
    (interactive)
    (find-file "~/Nextcloud/org/index.org"))
#+END_SRC
  
* Display preferences

Remove scrollbar

#+BEGIN_SRC emacs-lisp
(toggle-scroll-bar -1)
#+END_SRC

Remove toolbar

#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC

Install solarized-theme
#+BEGIN_SRC emacs-lisp
(use-package solarized-theme
    :ensure t)
#+END_SRC

Configure solarized-dark theme
#+BEGIN_SRC emacs-lisp
(load-theme 'solarized-dark t)
#+END_SRC

* Configure evil-mode
#+BEGIN_SRC emacs-lisp
  (use-package evil
      :ensure t)

  (evil-mode t)
#+END_SRC

* Configure helm

#+BEGIN_SRC emacs-lisp
(use-package helm
    :ensure t)

(require 'helm-config)
(helm-mode 1)
(define-key global-map [remap find-file] 'helm-find-files)
(define-key global-map [remap list-buffers] 'helm-buffers-list)

#+END_SRC

* Org-Journal
#+BEGIN_SRC emacs-lisp
	(use-package org-journal
			:ensure t)

	(require 'org-journal)
	(setq org-journal-dir "~/Nextcloud/org/journal")
	(defun org-journal-find-location ()
		;; Open today's journal, but specify a non-nil prefix argument in order to
		;; inhibit inserting the heading; org-capture will insert the heading.
		(org-journal-new-entry t)
		;; Position point on the journal's top-level heading so that org-capture
	;; will add the new entry as a child entry.
	(goto-char (point-min)))

#+END_SRC
* Org-Mode
** Modules
#+BEGIN_SRC emacs-lisp
#+END_SRC
** Org Agenda 
#+BEGIN_SRC emacs-lisp
	(setq org-agenda-files '("~/Nextcloud/org" "~/Nextcloud/org/journal"))
#+END_SRC

Do not dim blocked tasks
#+BEGIN_SRC emacs-lisp
	(setq org-agenda-dim-blocked-tasks nil)
#+END_SRC

Custom agenda command definitions
#+BEGIN_SRC emacs-lisp
	(setq org-agenda-custom-commands
				'((" " "Agenda"
					 ((agenda "")
						(todo "NEXT")
						(tags-todo "REFILE")
						(tags-todo "SPRINT")
						(tags-todo "@cybersight")
						(tags-todo "-CANCELLED/!"
							((org-agenda-overriding-header "Projects")
							 (org-agenda-skip-function 'bh/skip-non-projects)
							 (org-tags-match-list-sublevels 'indented)
							 (org-agenda-sorting-strategy
							 '(category-keep))))
					 ))
					("w" "Work Agenda"
						((agenda "" ((org-agenda-span 1)))
						 (tags-todo "SPRINT")
						 (tags-todo "@cybersight")
					 ))
					("r" "Refile"
						((tags-todo "REFILE")
					 ))
				 ))
#+END_SRC

** Configure display preferences
#+BEGIN_SRC emacs-lisp
	(use-package org-bullets
			:ensure t
			:commands org-bullets-mode
			:hook (org-mode . org-bullets-mode))

	(setq org-src-tab-acts-natively t)
	(setq org-ellipsis "â¤µ")
#+END_SRC

show parens
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

** Configure code templates
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\#+END_SRC"))
#+END_SRC

** Task and org capture management
#+BEGIN_SRC emacs-lisp
	(setq org-directory "~/Nextcloud/org/")

	(defun org-file-path (filename)
		(concat (file-name-as-directory org-directory) filename))

	(setq org-inbox-file (org-file-path "inbox.org"))
	(setq org-index-file (org-file-path "gtd.org"))
	(setq org-archive-location
	(concat (org-file-path "archive.org") "::* From %s"))

#+END_SRC

TODO Keywords
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
#+END_SRC

Tags
#+BEGIN_SRC emacs-lisp
	(setq org-tag-alist '(("@cybersight" . ?c) 
						("@home" . ?h)
						("@errand" . ?e)
						("@computer" . ?C)
						("@phone" . ?p)
						("SPRINT" . ?s)
            ("PROJECT" . ?P)))

#+END_SRC

Enter org capture in evil insert mode
#+BEGIN_SRC emacs-lisp
(add-hook 'org-capture-mode-hook 'evil-insert-state)
#+END_SRC
** Projects

Any project is stuck if no subtask is categorized as next
#+BEGIN_SRC emacs-lisp
(setq org-stuck-projects '("" nil nil ""))
#+END_SRC

Helper function to help define projects for agenda views
#+BEGIN_SRC emacs-lisp
	(defun bh/find-project-task ()
		"Move point to the parent (project) task if any"
		(save-restriction
				(widen)
				(let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
				(while (org-up-heading-safe)
						(when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
						(setq parent-task (point))))
				(goto-char parent-task)
				parent-task)))
	(defun bh/is-project-p ()
		"Any task with a todo keyword subtask"
		(save-restriction
			(widen)
			(let ((has-subtask)
						(subtree-end (save-excursion (org-end-of-subtree t)))
						(is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
				(save-excursion
					(forward-line 1)
					(while (and (not has-subtask)
											(< (point) subtree-end)
											(re-search-forward "^\*+ " subtree-end t))
						(when (member (org-get-todo-state) org-todo-keywords-1)
							(setq has-subtask t))))
				(and is-a-task has-subtask))))

	(defun bh/is-project-subtree-p ()
		"Any task with a todo keyword that is in a project subtree.
	Callers of this function already widen the buffer view."
		(let ((task (save-excursion (org-back-to-heading 'invisible-ok)
																(point))))
			(save-excursion
				(bh/find-project-task)
				(if (equal (point) task)
						nil
					t))))

	(defun bh/is-task-p ()
		"Any task with a todo keyword and no subtask"
		(save-restriction
			(widen)
			(let ((has-subtask)
						(subtree-end (save-excursion (org-end-of-subtree t)))
						(is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
				(save-excursion
					(forward-line 1)
					(while (and (not has-subtask)
											(< (point) subtree-end)
											(re-search-forward "^\*+ " subtree-end t))
						(when (member (org-get-todo-state) org-todo-keywords-1)
							(setq has-subtask t))))
				(and is-a-task (not has-subtask)))))

	(defun bh/is-subproject-p ()
		"Any task which is a subtask of another project"
		(let ((is-subproject)
					(is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
			(save-excursion
				(while (and (not is-subproject) (org-up-heading-safe))
					(when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
						(setq is-subproject t))))
			(and is-a-task is-subproject)))

	(defun bh/list-sublevels-for-projects-indented ()
		"Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
		This is normally used by skipping functions where this variable is already local to the agenda."
		(if (marker-buffer org-agenda-restrict-begin)
				(setq org-tags-match-list-sublevels 'indented)
			(setq org-tags-match-list-sublevels nil))
		nil)

	(defun bh/list-sublevels-for-projects ()
		"Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
		This is normally used by skipping functions where this variable is already local to the agenda."
		(if (marker-buffer org-agenda-restrict-begin)
				(setq org-tags-match-list-sublevels t)
			(setq org-tags-match-list-sublevels nil))
		nil)

	(defvar bh/hide-scheduled-and-waiting-next-tasks t)

	(defun bh/toggle-next-task-display ()
		(interactive)
		(setq bh/hide-scheduled-and-waiting-next-tasks (not bh/hide-scheduled-and-waiting-next-tasks))
		(when  (equal major-mode 'org-agenda-mode)
			(org-agenda-redo))
		(message "%s WAITING and SCHEDULED NEXT Tasks" (if bh/hide-scheduled-and-waiting-next-tasks "Hide" "Show")))

	(defun bh/skip-stuck-projects ()
		"Skip trees that are not stuck projects"
		(save-restriction
			(widen)
			(let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
				(if (bh/is-project-p)
						(let* ((subtree-end (save-excursion (org-end-of-subtree t)))
									 (has-next ))
							(save-excursion
								(forward-line 1)
								(while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
									(unless (member "WAITING" (org-get-tags-at))
										(setq has-next t))))
							(if has-next
									nil
								next-headline)) ; a stuck project, has subtasks but no next task
					nil))))

	(defun bh/skip-non-stuck-projects ()
		"Skip trees that are not stuck projects"
		;; (bh/list-sublevels-for-projects-indented)
		(save-restriction
			(widen)
			(let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
				(if (bh/is-project-p)
						(let* ((subtree-end (save-excursion (org-end-of-subtree t)))
									 (has-next ))
							(save-excursion
								(forward-line 1)
								(while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
									(unless (member "WAITING" (org-get-tags-at))
										(setq has-next t))))
							(if has-next
									next-headline
								nil)) ; a stuck project, has subtasks but no next task
					next-headline))))

	(defun bh/skip-non-projects ()
		"Skip trees that are not projects"
		;; (bh/list-sublevels-for-projects-indented)
		(if (save-excursion (bh/skip-non-stuck-projects))
				(save-restriction
					(widen)
					(let ((subtree-end (save-excursion (org-end-of-subtree t))))
						(cond
						 ((bh/is-project-p)
							nil)
						 ((and (bh/is-project-subtree-p) (not (bh/is-task-p)))
							nil)
						 (t
							subtree-end))))
			(save-excursion (org-end-of-subtree t))))

	(defun bh/skip-non-tasks ()
		"Show non-project tasks.
	Skip project and sub-project tasks, habits, and project related tasks."
		(save-restriction
			(widen)
			(let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
				(cond
				 ((bh/is-task-p)
					nil)
				 (t
					next-headline)))))

	(defun bh/skip-project-trees-and-habits ()
		"Skip trees that are projects"
		(save-restriction
			(widen)
			(let ((subtree-end (save-excursion (org-end-of-subtree t))))
				(cond
				 ((bh/is-project-p)
					subtree-end)
				 ((org-is-habit-p)
					subtree-end)
				 (t
					nil)))))

	(defun bh/skip-projects-and-habits-and-single-tasks ()
		"Skip trees that are projects, tasks that are habits, single non-project tasks"
		(save-restriction
			(widen)
			(let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
				(cond
				 ((org-is-habit-p)
					next-headline)
				 ((and bh/hide-scheduled-and-waiting-next-tasks
							 (member "WAITING" (org-get-tags-at)))
					next-headline)
				 ((bh/is-project-p)
					next-headline)
				 ((and (bh/is-task-p) (not (bh/is-project-subtree-p)))
					next-headline)
				 (t
					nil)))))

	(defun bh/skip-project-tasks-maybe ()
		"Show tasks related to the current restriction.
	When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
	When not restricted, skip project and sub-project tasks, habits, and project related tasks."
		(save-restriction
			(widen)
			(let* ((subtree-end (save-excursion (org-end-of-subtree t)))
						 (next-headline (save-excursion (or (outline-next-heading) (point-max))))
						 (limit-to-project (marker-buffer org-agenda-restrict-begin)))
				(cond
				 ((bh/is-project-p)
					next-headline)
				 ((org-is-habit-p)
					subtree-end)
				 ((and (not limit-to-project)
							 (bh/is-project-subtree-p))
					subtree-end)
				 ((and limit-to-project
							 (bh/is-project-subtree-p)
							 (member (org-get-todo-state) (list "NEXT")))
					subtree-end)
				 (t
					nil)))))

	(defun bh/skip-project-tasks ()
		"Show non-project tasks.
	Skip project and sub-project tasks, habits, and project related tasks."
		(save-restriction
			(widen)
			(let* ((subtree-end (save-excursion (org-end-of-subtree t))))
				(cond
				 ((bh/is-project-p)
					subtree-end)
				 ((org-is-habit-p)
					subtree-end)
				 ((bh/is-project-subtree-p)
					subtree-end)
				 (t
					nil)))))

	(defun bh/skip-non-project-tasks ()
		"Show project tasks.
	Skip project and sub-project tasks, habits, and loose non-project tasks."
		(save-restriction
			(widen)
			(let* ((subtree-end (save-excursion (org-end-of-subtree t)))
						 (next-headline (save-excursion (or (outline-next-heading) (point-max)))))
				(cond
				 ((bh/is-project-p)
					next-headline)
				 ((org-is-habit-p)
					subtree-end)
				 ((and (bh/is-project-subtree-p)
							 (member (org-get-todo-state) (list "NEXT")))
					subtree-end)
				 ((not (bh/is-project-subtree-p))
					subtree-end)
				 (t
					nil)))))

	(defun bh/skip-projects-and-habits ()
		"Skip trees that are projects and tasks that are habits"
		(save-restriction
			(widen)
			(let ((subtree-end (save-excursion (org-end-of-subtree t))))
				(cond
				 ((bh/is-project-p)
					subtree-end)
				 ((org-is-habit-p)
					subtree-end)
				 (t
					nil)))))

	(defun bh/skip-non-subprojects ()
		"Skip trees that are not projects"
		(let ((next-headline (save-excursion (outline-next-heading))))
			(if (bh/is-subproject-p)
					nil
				next-headline)))
#+END_SRC
  
** Archive when done

#+BEGIN_SRC emacs-lisp
	(defun hmov/mark-done-and-archive ()
			"Mark the state of an org-mode item as DONE and archive it"
			(interactive)
			(org-todo 'done)
			(org-archive-subtree))
#+END_SRC

** Capture Templates
#+BEGIN_SRC emacs-lisp
	(setq org-capture-templates
		 '(("b" "Blog Idea"
				entry
				(file (org-file-path "blog-ideas.org"))
				"* %?\n")

			 ("t" "Todo"
				entry
				(file org-inbox-file)
				"* TODO %?\n")

			 ("T" "Tickler" 
				entry
				(file+headline "~/Nextcloud/org/tickler.org" "Tickler")
				"* %i%? \n %U")
       
       ("j" "Journal entry" entry (function org-journal-find-location)
         "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")

			 ("n" "note" 
				entry 
				(file org-inbox-file)
				"* %? :NOTE:\n%U\n%a\n")))

#+END_SRC

** Refile settings
#+BEGIN_SRC emacs-lisp
	(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                   (org-agenda-files :maxlevel . 9))))
#+END_SRC
** Org keybinds

#+BEGIN_SRC emacs-lisp
	(add-hook 'org-agenda-mode-hook
	  (lambda ()
		  (define-key org-agenda-mode-map "k" 'evil-previous-line)
	    (define-key org-agenda-mode-map "j" 'evil-next-line)
	))

	(define-key org-mode-map(kbd "C-c C-x C-s") 'hmov/mark-done-and-archive)
	(define-key org-mode-map(kbd "C-c C-x C-p") 'org-pomodoro)
	(define-key global-map "\C-cl" 'org-store-link)
	(define-key global-map "\C-cc" 'org-capture)
	(define-key global-map "\C-ca" 'org-agenda)
#+END_SRC

Hit =C-c i= to quickly open up my todo list.

#+BEGIN_SRC emacs-lisp
	(defun hmov/open-index-file ()
		"Open the master org TODO list."
		(interactive)
		(find-file org-index-file)
		(end-of-buffer))

  (global-set-key (kbd "C-c i") 'hmov/open-index-file)
#+END_SRC
** Babel
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((R . t)
   (emacs-lisp . t)
   (haskell . nil)
   (ledger . t)         ;this is the important one for this tutorial
   (octave . t)))
#+END_SRC
** Pomodoro
#+BEGIN_SRC emacs-lisp
  (use-package org-pomodoro
	  :ensure t)

#+END_SRC
* Programming Environments

Enable shallow indentation
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
#+END_SRC


** Lisps
#+BEGIN_SRC emacs-lisp
	(setq lispy-mode-hooks '(lisp-mode-hook))
#+END_SRC
* Backup Settings
Place add backups in one directory and purge weekly
#+BEGIN_SRC emacs-lisp
  (setq temporary-file-directory "~/Nextcloud/temp")
	(setq backup-directory-alist
		`((".*" . ,temporary-file-directory)))
	(setq auto-save-file-name-transforms
		`((".*" ,temporary-file-directory t)))
	(message "Deleting old backup files...")
	(let ((week (* 60 60 24 7))
				(current (float-time (current-time))))
		(dolist (file (directory-files temporary-file-directory t))
			(when (and (backup-file-name-p file)
								 (> (- current (float-time (nth 5 (file-attributes file))))
										week))
				(message "%s" file)
				(delete-file file))))
#+END_SRC



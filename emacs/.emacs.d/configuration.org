#+TITLE: Emacs Configuration

* Configure =use-package=

#+BEGIN_SRC emacs-lisp
(require 'package)

(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))

(setq package-enable-at-startup nil)
(package-initialize)

(unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

(eval-when-compile
    (require 'use-package))

(setq use-package-verbose t)
(setq use-package-always t)
#+END_SRC

Always compile packages, and use the newest version available.
#+BEGIN_SRC emacs-lisp
  (use-package auto-compile
     :ensure t
     :config (auto-compile-on-load-mode))
  (setq load-prefer-newer t)
#+END_SRC

* Utility Functions
#+BEGIN_SRC emacs-lisp
	(defun hmov/reload-config ()
		(interactive)
		(load-file "~/.emacs.d/init.el"))

  (defun hmov/gtd ()
    (interactive)
    (find-file "~/Nextcloud/org/index.org"))
#+END_SRC
  
* Display preferences

Remove scrollbar

#+BEGIN_SRC emacs-lisp
(toggle-scroll-bar -1)
#+END_SRC

Remove toolbar

#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC

Install solarized-theme
#+BEGIN_SRC emacs-lisp
(use-package solarized-theme
    :ensure t)
#+END_SRC

Configure solarized-dark theme
#+BEGIN_SRC emacs-lisp
(load-theme 'solarized-dark t)
#+END_SRC

* Configure evil-mode
#+BEGIN_SRC emacs-lisp
  (use-package evil
      :ensure t)

  (evil-mode t)
#+END_SRC

* Configure helm

#+BEGIN_SRC emacs-lisp
(use-package helm
    :ensure t)

(require 'helm-config)
(helm-mode 1)
(define-key global-map [remap find-file] 'helm-find-files)
(define-key global-map [remap list-buffers] 'helm-buffers-list)

#+END_SRC

* Org-Mode
** Org Agenda 
#+BEGIN_SRC emacs-lisp
	(setq org-agenda-files (quote ("~/Nextcloud/org")))
#+END_SRC

Do not dim blocked tasks
#+BEGIN_SRC emacs-lisp
	(setq org-agenda-dim-blocked-tasks nil)
#+END_SRC

Custom agenda command definitions
#+BEGIN_SRC emacs-lisp
	(setq org-agenda-custom-commands
				'(("o" "Work Agenda"
           ((agenda "")
            (tags-todo "@work")))))
#+END_SRC

** Configure display preferences
#+BEGIN_SRC emacs-lisp
	(use-package org-bullets
			:ensure t
			:commands org-bullets-mode
			:hook (org-mode . org-bullets-mode))

	(setq org-src-tab-acts-natively t)
	(setq org-ellipsis "â¤µ")
#+END_SRC

** Configure code templates
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\#+END_SRC"))
#+END_SRC

** Task and org capture management
#+BEGIN_SRC emacs-lisp
	(setq org-directory "~/Nextcloud/org/")

	(defun org-file-path (filename)
		(concat (file-name-as-directory org-directory) filename))

	(setq org-inbox-file (org-file-path "inbox.org"))
	(setq org-index-file (org-file-path "index.org"))
	(setq org-archive-location
	(concat (org-file-path "archive.org") "::* From %s"))

#+END_SRC

TODO Keywords
#+BEGIN_SRC emacs-lisp
	(setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
#+END_SRC

Tags
#+BEGIN_SRC emacs-lisp
	(setq org-tag-alist '(("@work" . ?w) 
												("@home" . ?h)
												("@errand" . ?e)
												("PERSONAL" . ?p)
                        ("ORG" . ?o)
                        ("NOTE" . ?n)))
#+END_SRC

** Archive when done

#+BEGIN_SRC emacs-lisp
	(defun hmov/mark-done-and-archive ()
			"Mark the state of an org-mode item as DONE and archive it"
			(interactive)
			(org-todo 'done)
			(org-archive-subtree))
#+END_SRC

** Capture Templates
#+BEGIN_SRC emacs-lisp
	 (setq org-capture-templates
			'(("b" "Blog Idea"
				 entry
				 (file (org-file-path "blog-ideas.org"))
				 "* %?\n")

				("t" "Todo"
				 entry
				 (file org-inbox-file)
				 "* TODO %?\n")

	      ("n" "note" 
         entry 
         (file org-inbox-file)
         "* %? :NOTE:\n%U\n%a\n")))

#+END_SRC

** Refile settings
#+BEGIN_SRC emacs-lisp
	(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                   (org-agenda-files :maxlevel . 9))))
#+END_SRC
** Org keybinds

#+BEGIN_SRC emacs-lisp
	(define-key org-mode-map(kbd "C-c C-x C-s") 'hmov/mark-done-and-archive)
	(define-key global-map "\C-cl" 'org-store-link)
	(define-key global-map "\C-cc" 'org-capture)
  (define-key global-map "\C-ca" 'org-agenda)
#+END_SRC

Hit =C-c i= to quickly open up my todo list.

#+BEGIN_SRC emacs-lisp
	(defun hmov/open-index-file ()
		"Open the master org TODO list."
		(interactive)
		(find-file org-index-file)
		(end-of-buffer))

  (global-set-key (kbd "C-c i") 'hmov/open-index-file)
#+END_SRC
* Programming Environments

Enable shallow indentation
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
#+END_SRC


** Lisps
#+BEGIN_SRC emacs-lisp
	(setq lispy-mode-hooks '(lisp-mode-hook))
#+END_SRC
* Backup Settings
Place add backups in one directory and purge weekly
#+BEGIN_SRC emacs-lisp
  (setq temporary-file-directory "~/Nextcloud/temp")
	(setq backup-directory-alist
		`((".*" . ,temporary-file-directory)))
	(setq auto-save-file-name-transforms
		`((".*" ,temporary-file-directory t)))
	(message "Deleting old backup files...")
	(let ((week (* 60 60 24 7))
				(current (float-time (current-time))))
		(dolist (file (directory-files temporary-file-directory t))
			(when (and (backup-file-name-p file)
								 (> (- current (float-time (nth 5 (file-attributes file))))
										week))
				(message "%s" file)
				(delete-file file))))
#+END_SRC


